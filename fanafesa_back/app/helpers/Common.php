<?php  function dn($w1=''){  $fs = explode(" ", preg_replace('!\s+!', ' ', trim($w1))); $l = count($fs); $fscom =""; $np ="";  $data = ['','',''];  for ($i = 0; $i < $l; $i++){  if(strcasecmp($fs[$i],"de")==0 || strcasecmp($fs[$i],"del")==0 || strcasecmp($fs[$i],"la")==0 || strcasecmp($fs[$i],"los")==0 || strcasecmp($fs[$i],"las")==0 || strcasecmp($fs[$i],"San")==0){  $fscom = $fscom.$fs[$i]." ";  if(isset($fs[$i+1])){ if(strcasecmp ($fs[$i+1],"la")!==0 && strcasecmp($fs[$i+1],"los")!==0 && strcasecmp($fs[$i+1],"las")!==0){ $fscom = $fscom.$fs[$i+1]."@"; } } }else{ $fscom = $fscom.$fs[$i]."@"; }  }  $divcom = explode("@", trim($fscom,'@'));  $ld = count ($divcom);  for($i=0; $i < $l; $i++){  $a = -1; $enc = false;   for($j=0; $j < $ld; $j++){  if(@strpos(" ".$divcom[$j], $fs[$i])){ if(!(strcasecmp($fs[$i],"de")==0 || strcasecmp($fs[$i],"del")==0 || strcasecmp($fs[$i],"la")==0 || strcasecmp($fs[$i],"los")==0 || strcasecmp($fs[$i],"las")==0 || strcasecmp($fs[$i],"San")==0)){ $enc = true; $a = $j; }else{ $enc = false; } } }    if($enc){  $np=$np.$divcom[$a]."@";  } else {  if(!(strcasecmp($fs[$i],"de")==0 || strcasecmp($fs[$i],"del")==0 || strcasecmp($fs[$i],"la")==0 || strcasecmp($fs[$i],"los")==0 || strcasecmp($fs[$i],"las")==0 || strcasecmp($fs[$i],"San")==0)){ $np=$np.$fs[$i]."@"; }  }  }  $dvn = explode ("@", $np); $ldn = count($dvn);  if($ldn >3){  for($i = 0; $i < $ldn; $i++){  if($i < $ldn-3){ $data[0] = $data[0].$dvn[$i].' '; }  if($i == $ldn-2){ $data[2] = $dvn[$i]; }  if ($i == $ldn-3){ $data[1] = $dvn[$i]; }  }  }  if($ldn <= 3){ $data[0] = $dvn[0]; $data[1] = $dvn[1]; $data[2] = ''; }  return $data; }  function dtl($csvFile){ $dl = array( ';' => 0, ',' => 0, "\t" => 0, "|" => 0 ); $handle = fopen($csvFile, "r"); $firstLine = fgets($handle); fclose($handle); foreach ($dl as $delimiter => &$count) { $count = count(str_getcsv($firstLine, $delimiter)); }  return array_search(max($dl), $dl); }  function is_utf8($string) { return preg_match('%^(?: [\x09\x0A\x0D\x20-\x7E] # ASCII | [\xC2-\xDF][\x80-\xBF] # non-overlong 2-byte | \xE0[\xA0-\xBF][\x80-\xBF] # excluding overlongs | [\xE1-\xEC\xEE\xEF][\x80-\xBF]{2} # straight 3-byte | \xED[\x80-\x9F][\x80-\xBF] # excluding surrogates | \xF0[\x90-\xBF][\x80-\xBF]{2} # planes 1-3 | [\xF1-\xF3][\x80-\xBF]{3} # planes 4-15 | \xF4[\x80-\x8F][\x80-\xBF]{2} # plane 16 )*$%xs', $string); }  function cleanStr($str='',$trans=1,$add_slashes=true){ if($trans==1) $str=mb_strtoupper($str); elseif($trans==2) $str=mb_strtolower($str); $s = trim($str); if($add_slashes) $s = addslashes($s); return $s; }